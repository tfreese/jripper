// Tasks im SubModul ausführen: gradle MODUL:clean build
buildscript {
    // Für Plugins
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal() // maven { url "https://plugins.gradle.org/m2"; name "plugins-gradle" }
    }

    dependencies {
        classpath "de.freese.gradle:gradle-plugins:0.0.1-SNAPSHOT"
        classpath "io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$version_springBootGradlePlugin"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
        }

        dependencies {
            //dependency "GROUP:ARTIFACT:$version_XXX"
        }
    }
}

project("jripper-core") {
    apply plugin: "java-library"
    description = "Java Ripper Core Modul"
    dependencies {
        api("org.apache.commons:commons-lang3")
        api("org.slf4j:slf4j-api")

        runtimeOnly("ch.qos.logback:logback-classic")
        runtimeOnly("org.codehaus.janino:janino")

        testImplementation("org.junit.jupiter:junit-jupiter")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }

    //test.enabled = false
    //test {
    //exclude "de/freese/jripper/core/**"
    //exclude "de/freese/jripper/core/TestDiskID.class"
    //exclude "de/freese/jripper/core/TestRipper.class"
    //}
}

project("jripper-console") {
    description = "Java Ripper Console Modul"
    dependencies {
        implementation(project(":jripper-core"))
    }
}

project("jripper-swing") {
    apply plugin: "org.springframework.boot"
    description = "Java Ripper Swing Modul"
    dependencies {
        implementation(project(":jripper-core"))

        implementation("de.freese:binding:$project.version")
    }

    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.jripper.swing.JRipperSwing"
    }
}
